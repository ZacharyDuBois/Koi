#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# Night Updater
# https://github.com/ZacharyDuBois/Night-Uploader
version="v0.4"


##
# Variables
##

# All locations should be the full path to the directories with a trailing slash.
location=""
s3bucket=""
endLocation=""
templateLocation=""
# The next 7 are not recommend to edit but you may if you'd like.
indexFile="index.html"
indexFileLoc="$location""$indexFile"
listingFile="tmp"
listingFileLoc="$location""$listingFile"
newUploadsFile="New-Uploads.txt"
newUploadsFileLoc="$location""$newUploadsFile"
curTime=$(date '+%F %T')
# If you don't want to use Pushover, leave pushoverAppKey and/or pushoverUserKey set to "".
pushoverAppKey=""
pushoverUserKey=""
pushoverTitle="Night Uploader"
pushoverURL=""
pushoverURLTitle=""

# Do not edit
runType=$1


##
# Message Types
##

fail="[$(tput setaf 1)FAIL$(tput sgr0)]"
ok="[$(tput setaf 2)OK$(tput sgr0)]"
running="[$(tput setaf 3)*$(tput sgr0)]"
notice="[$(tput setaf 3)NOTICE$(tput sgr0)]"
warning="[$(tput setaf 3)WARNING$(tput sgr0)]"
info="[$(tput setaf 6)INFO$(tput sgr0)]"
finish="[$(tput setaf 4)DONE$(tput sgr0)]"


##
# Startup Checks
##

# Check for root
if [[ "$(id -u)" == 0 ]]
then
  echo "$fail Do not run this script as root."
  exit 1
fi

# Check for AWS CLI
which aws > /dev/null
checkForAWS=$?
if [[ "$checkForAWS" != 0 ]]
then 
  echo "$fail You need AWS CLI to run this script."
  exit 1
fi

# Check for variables set correctly
if [[ "$location" == "" ]] && [[ "$s3bucket" == "" ]] && [[ "$endLocation" == "" ]] && [[ "$templateLocation" == "" ]] && [[ "$indexFile" == "" ]] && [[ "$indexFileLoc" == "" ]] && [[ "$listingFile" == "" ]] && [[ "$listingFileLoc" == "" ]] && [[ "$newUploadsFile" == "" ]] && [[ "$newUploadsFileLoc" == "" ]] && [[ "$curTime" == "" ]]
then
  echo "$fail You have not set all the required variables in the variables block. Please edit them with the correct details."
  exit 1
fi

# Check if locations and files exist.
if ! [[ -d "$location" ]] && ! [[ -d "$endLocation" ]] && ! [[ -d "$templateLocation" ]] && ! [[ -r "$templateLocation""aftercontent.html" ]] && ! [[ -r "$templateLocation""footer.html" ]] && ! [[ -r "$templateLocation""head.html" ]]
then
  echo "$fail One or more of the folders and/or files does not exist."
  exit 1
fi

# Check if AWS is running already
retryCount=0
while ps aux | grep -v grep | grep "aws" > /dev/null
do
  if [[ "$retryCount" == 0 ]]
  then
    echo "$warning AWS is currently running. Waiting for AWS to finish to avoid issues."
  fi
  
  if [[ "$retryCount" == 3600 ]]
  then
    echo "$fail Night Uploader failed to run due to an active AWS process taking longer than 3600 seconds."
    exit 1
  fi
  
  echo -n "."
  retryCount=$((retryCount+1))
  sleep 1
done
if [[ "$retryCount" != 0 ]]
then
  echo
fi


##
# Start
##

pushoverSend() {
  message=$1
  if [[ "$pushoverAppKey" != "" ]] && [[ "$pushoverUserKey" != "" ]]
  then
    curl -s --form-string "token=$pushoverAppKey" --form-string "user=$pushoverUserKey" --form-string "url=$pushoverURL" --form-string "url_title=$pushoverURLTitle" --form-string "priority=0" --form-string "title=$pushoverTitle" --form-string "message=$message" https://api.pushover.net/1/messages.json > /dev/null
    pushoverStatus=$?
    if [[ "$pushoverStatus" == 0 ]]
    then
      echo "$info Pushover message sent successfully: $message"
    else
      echo "$warning Pushover failed to send message: $message"
    fi
  else
    echo "$info No Pushover key set to send message: $message"
  fi
}

makeNewFilesList() {
  # Make a new files list
  echo "$running Generating new files list."
  ls $location | grep -v $newUploadsFile > $newUploadsFileLoc
  echo "Last Updated: $curTime" >> $newUploadsFileLoc
}

uploadFiles() {
  # Upload
  echo "$running Starting upload to s3://"$s3bucket"/"
  pushoverSend "Starting to upload files to s3://"$s3bucket"/. Internet may slow down a bit."
  aws s3 cp $location s3://"$s3bucket"/ --recursive --exclude ".*" --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
}

makeIndex() {
  # Generate Index
  echo "$running Generating index file."
  pushoverSend "Generating index file."
  
  numberOfFiles=0
  
  aws s3 ls s3://"$s3bucket"/ | grep -v PRE | awk -F' ' '{ print $4 }' > $listingFileLoc
  sort -f $listingFileLoc -o $listingFileLoc
  cat "$templateLocation""head.html" > $indexFileLoc
  echo "  <ul>" >> $indexFileLoc
  
  while read listItem
  do
    numberOfFiles=$(($numberOfFiles+1))
    echo "    <li><a href=\"/"$listItem"\">"$listItem"</a></li>" >> $indexFileLoc
  done < $listingFileLoc
  
  echo "  </ul>" >> $indexFileLoc
  
  cat "$templateLocation""aftercontent.html" >> $indexFileLoc
  echo "  <p><code>"$numberOfFiles" Items</code></p>" >> $indexFileLoc
  echo "  <p>Index Last Updated: <code>"$curTime"</code></p>" >> $indexFileLoc
  echo "  <p>Files uploaded and generated with <a href=\"https://bitbucket.org/Zachary_DuBois/night-uploader\">Night Uploader</a> <code>"$version"</code></p>" >> $indexFileLoc
  cat "$templateLocation""footer.html" >> $indexFileLoc
  
  # Upload Index
  echo "$running Uploading Index."
  aws s3 cp $indexFileLoc s3://"$s3bucket"/"$indexFile" --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
}

cleanUp() {
  echo "$running Cleaning up."
  rm $newUploadsFileLoc
  rm $listingFileLoc
  rm $indexFileLoc
}

moveFiles() {
  # Move them to the done location.
  echo "$running Moving files to $endLocation..."
  mv "$location"* $endLocation
}

##
# Run Types and Workflows
##

if [[ "$runType" == "" ]]
then
  # Standard run. List new files, upload, transcode media, make media pages, index.
  echo "$notice Starting standard run."
  if [[ "$(ls $location)" == "" ]]
  then
    # No files to upload, reindex the CDN, see if anything needs transcoding, or needs media pages. Then, finish.
    echo "$ok No files found for upload."
    pushoverSend "No files found for upload. Reindexing."
    makeIndex
    # Transcode
    # Media pages
    
    cleanUp
  else
    # New files found. Make listing of new, upload, move, transcode, media player pages, and index.
    echo "$ok Files found, continuing with workflow."
    pushoverSend "New files are being prepared for upload."
    
    makeNewFilesList
    uploadFiles
    cleanUp
    moveFiles
    # Transcode
    # Media pages
    makeIndex
    cleanUp
  fi
  echo "$ok Finished standard run."
  pushoverSend "Finished a standard run."
fi


##
# Done
##

echo "$finish Done"

exit 0
